#!/usr/bin/perl
use warnings;
use strict;

my @branches = ();
if (@ARGV) {
  push @branches, @ARGV;
}

my $setup = <<'SETUP_SQL';
create table perf(job text, branch text, commit_hash text, dirty text, test text, real float, user float, sys float, status int, result text);
.separator ","
.headers on
.mode column
.import perf.csv perf
SETUP_SQL

my $branch1 = $ARGV[0];
my $branch2 = $ARGV[1];
#print "$branch1, $branch2\n";

chomp (my $rev1=`git rev-parse --short $branch1`);
if ($? != 0) {die("failed to find rev for $branch1")};
chomp (my $rev2=`git rev-parse --short $branch2`);
if ($? != 0) {die("failed to find rev for $branch2")};
#print "$rev1, $rev2\n";

my $test_counts = <<TESTS_SQL;
SELECT
    test,
    Count(*) as runs,
    Count(CASE WHEN result = 'SUCCESS' THEN 1 END) as success,
    Count(CASE WHEN result = 'TIMEOUT' THEN 1 END) as timeout,
    Count(CASE WHEN result = 'FAILED' THEN 1 END) as failed,
    COUNT(CASE WHEN result = 'SUCCESS' THEN 1 END) * 100.0 / Count(*) as percent
FROM
    perf
WHERE
    commit_hash in ('${rev2}')
GROUP BY
    test;
TESTS_SQL

my $query = <<QUERY_SQL;
select
  b1.test as test,
  printf("%  .2f", b1.rt) as "baseline_avg",
  printf("%  .2f", b2.rt) as "feature_avg",
  printf("%  .2f", b2.rt-b1.rt) as delta,
  cast(100*(b2.rt-b1.rt)/b1.rt as int) as percent
from (select test,avg(real) as rt from perf where commit_hash='${rev1}' group by commit_hash,test) as b1
inner join (select test,avg(real) as rt from perf where commit_hash='${rev2}' group by commit_hash,test) as b2
on b1.test = b2.test
order by test;
QUERY_SQL

my $sql = "$setup\n$test_counts\n$query";

#print "$sql\n";
#TODO could be nice to get stddev of tests.
my $result = `echo "$sql" | sqlite3`;
print "$result\n";
if ($? != 0) {die("Failed to run query")}
