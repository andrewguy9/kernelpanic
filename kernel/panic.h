#ifndef PANIC_H
#define PANIC_H

enum ERROR_CODE {
	RESOURCE_SHARED_UNLOCK_WHILE_EXCLUSIVE,
	RESOURCE_SHARED_UNLOCK_WHEN_UNLOCKED,
	RESOURCE_EXCLUSIVE_UNLOCK_WHILE_SHARED,
	MUTEX_UNLOCK_WHILE_UNLOCKED,
	SCHEDULER_RESUME_THREAD_MUST_BE_CRIT,
	SCHEDULER_RESUME_THREAD_NOT_BLOCKED,	
	SCHEDULER_BLOCK_THREAD_MUST_BE_CRIT,
	SCHEDULER_START_CRITICAL_MUTEX_NOT_AQUIRED,
	SCHEDULER_END_CRITICAL_NOT_CRITICAL,
	SCHEDULE_MUST_BE_ATOMIC,
	TIMER_RUN_TIMERS_MUST_BE_ATOMIC,
	TIMER_REGISTER_MUST_BE_ATOMIC,
	HEAP_PROMOTE_TOP,
	HEAP_FIND_ELEMENT_OUT_OF_BOUNDS,
	HEAP_ADD_PARENT_FULL,
	HEAP_POP_TAIL_NULL,
	HEAP_POP_TAIL_NOT_LEAF,
	LINKED_LIST_INSERT_NULL_NODE,
	LINKED_LIST_REMOVE_NULL_NODE,
	HAL_END_INTERRUPT_WRONG_LEVEL,
	SCHEDULER_FORCE_SWITCH_IS_CRITICAL,
	SCHEDULER_FORCE_SWITCH_IS_ATOMIC,
	TIMER_REGISTER_TIMER_ALREADY_ACTIVE
};

void GeneralPanic( enum ERROR_CODE error );
void KernelPanic( enum ERROR_CODE error );

#endif
